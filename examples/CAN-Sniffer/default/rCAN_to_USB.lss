
rCAN_to_USB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000c98  00000d2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009c  00800118  00800118  00000d44  2**0
                  ALLOC
  3 .debug_aranges 000000e0  00000000  00000000  00000d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000321  00000000  00000000  00000e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011d7  00000000  00000000  00001145  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007c5  00000000  00000000  0000231c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000010e4  00000000  00000000  00002ae1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000290  00000000  00000000  00003bc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005f1  00000000  00000000  00003e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000617  00000000  00000000  00004449  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00004a60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  44:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__vector_17>
  48:	0c 94 b7 01 	jmp	0x36e	; 0x36e <__vector_18>
  4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  54:	0c 94 84 04 	jmp	0x908	; 0x908 <__vector_21>
  58:	0c 94 b4 04 	jmp	0x968	; 0x968 <__vector_22>
  5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  80:	0c 94 67 05 	jmp	0xace	; 0xace <__vector_32>
  84:	0c 94 97 05 	jmp	0xb2e	; 0xb2e <__vector_33>
  88:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e8 e9       	ldi	r30, 0x98	; 152
  a8:	fc e0       	ldi	r31, 0x0C	; 12
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a8 31       	cpi	r26, 0x18	; 24
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	11 e0       	ldi	r17, 0x01	; 1
  bc:	a8 e1       	ldi	r26, 0x18	; 24
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a4 3b       	cpi	r26, 0xB4	; 180
  c6:	b1 07       	cpc	r27, r17
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	0e 94 85 00 	call	0x10a	; 0x10a <main>
  ce:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <_exit>

000000d2 <__bad_interrupt>:
  d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <__vector_17>:
   
   return 0;
}

ISR(TIMER0_OVF_vect)
{
  d6:	1f 92       	push	r1
  d8:	0f 92       	push	r0
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	0f 92       	push	r0
  de:	11 24       	eor	r1, r1
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
   // stop timer
   TCCR0A = 0;
  e4:	14 bc       	out	0x24, r1	; 36
   // reset timer
   TCNT0 = 0;
  e6:	16 bc       	out	0x26, r1	; 38

   //uart1_puts("timeout!!!\n");

   num_rx = 0;
  e8:	10 92 28 01 	sts	0x0128, r1
   rx_buffer[0] = 0;
  ec:	10 92 18 01 	sts	0x0118, r1
   // reset pointer to beginning of char[]
   p_rx = rx_buffer;
  f0:	88 e1       	ldi	r24, 0x18	; 24
  f2:	91 e0       	ldi	r25, 0x01	; 1
  f4:	90 93 27 01 	sts	0x0127, r25
  f8:	80 93 26 01 	sts	0x0126, r24
}
  fc:	9f 91       	pop	r25
  fe:	8f 91       	pop	r24
 100:	0f 90       	pop	r0
 102:	0f be       	out	0x3f, r0	; 63
 104:	0f 90       	pop	r0
 106:	1f 90       	pop	r1
 108:	18 95       	reti

0000010a <main>:
static volatile unsigned char rx_buffer[14];
static volatile unsigned char *p_rx;
static volatile uint8_t num_rx;

int main(void)
{
 10a:	6f 92       	push	r6
 10c:	7f 92       	push	r7
 10e:	8f 92       	push	r8
 110:	9f 92       	push	r9
 112:	af 92       	push	r10
 114:	bf 92       	push	r11
 116:	cf 92       	push	r12
 118:	df 92       	push	r13
 11a:	ef 92       	push	r14
 11c:	ff 92       	push	r15
 11e:	0f 93       	push	r16
 120:	1f 93       	push	r17
 122:	df 93       	push	r29
 124:	cf 93       	push	r28
 126:	cd b7       	in	r28, 0x3d	; 61
 128:	de b7       	in	r29, 0x3e	; 62
 12a:	2d 97       	sbiw	r28, 0x0d	; 13
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	f8 94       	cli
 130:	de bf       	out	0x3e, r29	; 62
 132:	0f be       	out	0x3f, r0	; 63
 134:	cd bf       	out	0x3d, r28	; 61
  // unsigned char rx_buffer[14];
  // unsigned char *p_rx;
  // uint8_t num_rx;

   p_rx = rx_buffer;
 136:	88 e1       	ldi	r24, 0x18	; 24
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	90 93 27 01 	sts	0x0127, r25
 13e:	80 93 26 01 	sts	0x0126, r24
   rx_buffer[0] = 0;
 142:	10 92 18 01 	sts	0x0118, r1
   num_rx = 0;
 146:	10 92 28 01 	sts	0x0128, r1


   CAN_init(BITRATE_100_KBPS);
 14a:	83 e0       	ldi	r24, 0x03	; 3
 14c:	0e 94 27 04 	call	0x84e	; 0x84e <CAN_init>

   CAN_Config();
 150:	0e 94 9a 01 	call	0x334	; 0x334 <CAN_Config>

    // Init UART
    // Init UART-1 at 500k bauds
   uart1_init( UART_BAUD_SELECT(500000,F_CPU) );
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 c5 05 	call	0xb8a	; 0xb8a <uart1_init>

   


// int on overflow
TIMSK0 = (1 << TOIE0);
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	80 93 6e 00 	sts	0x006E, r24




   sei();
 162:	78 94       	sei
   //uart1_puts("Startup\n");

   CAN_MOb_action(MOb0, CMD_RX_ALL);
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	64 e0       	ldi	r22, 0x04	; 4
 168:	0e 94 1f 03 	call	0x63e	; 0x63e <CAN_MOb_action>
         {
            // start serial watchdog, if 14 bytes aren't received within 16ms
            // normally it should take ~0.3ms
            // delete all received data
            // Prescaler: 1024
            TCCR0A = (1 << CS02) | (1 << CS00);
 16c:	25 e0       	ldi	r18, 0x05	; 5
 16e:	62 2e       	mov	r6, r18
                  CAN_MOb_action(MOb1, CMD_TX_DATA);

               }

               num_rx = 0;
               rx_buffer[0] = 0;
 170:	98 e1       	ldi	r25, 0x18	; 24
 172:	89 2e       	mov	r8, r25
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	99 2e       	mov	r9, r25
                  //uart1_puts("CRC decoded :)!!!\n");
                  
                  CAN_msg msg;

                  msg.id      = (uint16_t)( (uint16_t)(rx_buffer[0] << 8) | (rx_buffer[1]) );
                  msg.length  = rx_buffer[2];
 178:	86 e0       	ldi	r24, 0x06	; 6
 17a:	a8 2e       	mov	r10, r24
 17c:	b1 2c       	mov	r11, r1
 17e:	ac 0e       	add	r10, r28
 180:	bd 1e       	adc	r11, r29
                  {
                     msg.data[i] = rx_buffer[3 + i];
                  }

                  // Configure and send CAN Frame
                  CAN_Configure_MOb(MOb1, &msg);
 182:	6e 01       	movw	r12, r28
 184:	08 94       	sec
 186:	c1 1c       	adc	r12, r1
 188:	d1 1c       	adc	r13, r1
      if(CAN_MSG_RECEIVED != -1)
      {         
         CAN_Received_Action(CAN_MSG_RECEIVED);

         // Reset status
         CAN_MSG_RECEIVED = -1;
 18a:	77 24       	eor	r7, r7
 18c:	7a 94       	dec	r7
   CAN_MOb_action(MOb0, CMD_RX_ALL);

   unsigned int c;
   while(1)
   {
      c = uart1_getc();
 18e:	0e 94 df 05 	call	0xbbe	; 0xbbe <uart1_getc>
 192:	9c 01       	movw	r18, r24
      if((c & UART_NO_DATA))
 194:	90 fd       	sbrc	r25, 0
 196:	61 c0       	rjmp	.+194    	; 0x25a <main+0x150>
      {
         
      }
      else
      {
         if((c == 0xAA) || (num_rx != 0))
 198:	8a 3a       	cpi	r24, 0xAA	; 170
 19a:	91 05       	cpc	r25, r1
 19c:	29 f0       	breq	.+10     	; 0x1a8 <main+0x9e>
 19e:	80 91 28 01 	lds	r24, 0x0128
 1a2:	88 23       	and	r24, r24
 1a4:	09 f4       	brne	.+2      	; 0x1a8 <main+0x9e>
 1a6:	59 c0       	rjmp	.+178    	; 0x25a <main+0x150>
         {
            // start serial watchdog, if 14 bytes aren't received within 16ms
            // normally it should take ~0.3ms
            // delete all received data
            // Prescaler: 1024
            TCCR0A = (1 << CS02) | (1 << CS00);
 1a8:	64 bc       	out	0x24, r6	; 36

            
            if(num_rx > 0)
 1aa:	80 91 28 01 	lds	r24, 0x0128
 1ae:	88 23       	and	r24, r24
 1b0:	49 f0       	breq	.+18     	; 0x1c4 <main+0xba>
            {
               *p_rx = (unsigned char)c;
 1b2:	e0 91 26 01 	lds	r30, 0x0126
 1b6:	f0 91 27 01 	lds	r31, 0x0127
 1ba:	21 93       	st	Z+, r18
               p_rx++;
 1bc:	f0 93 27 01 	sts	0x0127, r31
 1c0:	e0 93 26 01 	sts	0x0126, r30
            }
            
            num_rx++;
 1c4:	80 91 28 01 	lds	r24, 0x0128
 1c8:	8f 5f       	subi	r24, 0xFF	; 255
 1ca:	80 93 28 01 	sts	0x0128, r24
            if(num_rx == 14)
 1ce:	80 91 28 01 	lds	r24, 0x0128
 1d2:	8e 30       	cpi	r24, 0x0E	; 14
 1d4:	09 f0       	breq	.+2      	; 0x1d8 <main+0xce>
 1d6:	41 c0       	rjmp	.+130    	; 0x25a <main+0x150>
            {
               // stop timer
               TCCR0A = 0;
 1d8:	14 bc       	out	0x24, r1	; 36
               // reset timer
               TCNT0 = 0;
 1da:	16 bc       	out	0x26, r1	; 38
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	00 e0       	ldi	r16, 0x00	; 0
 1e2:	10 e0       	ldi	r17, 0x00	; 0
               // verify data with CRC
               uint16_t crc = 0;

               for(uint8_t i = 0; i < 14; i++)
               {  
                  crc = crc_can(crc, rx_buffer[i]);
 1e4:	f8 01       	movw	r30, r16
 1e6:	e8 5e       	subi	r30, 0xE8	; 232
 1e8:	fe 4f       	sbci	r31, 0xFE	; 254
 1ea:	60 81       	ld	r22, Z
 1ec:	0e 94 39 01 	call	0x272	; 0x272 <crc_can>
 1f0:	0f 5f       	subi	r16, 0xFF	; 255
 1f2:	1f 4f       	sbci	r17, 0xFF	; 255
               

               // verify data with CRC
               uint16_t crc = 0;

               for(uint8_t i = 0; i < 14; i++)
 1f4:	0e 30       	cpi	r16, 0x0E	; 14
 1f6:	11 05       	cpc	r17, r1
 1f8:	a9 f7       	brne	.-22     	; 0x1e4 <main+0xda>
               {  
                  crc = crc_can(crc, rx_buffer[i]);
               }

               if(crc != 0)
 1fa:	89 2b       	or	r24, r25
 1fc:	31 f5       	brne	.+76     	; 0x24a <main+0x140>
               {
                  //uart1_puts("CRC decoded :)!!!\n");
                  
                  CAN_msg msg;

                  msg.id      = (uint16_t)( (uint16_t)(rx_buffer[0] << 8) | (rx_buffer[1]) );
 1fe:	50 91 18 01 	lds	r21, 0x0118
 202:	90 91 19 01 	lds	r25, 0x0119
                  msg.length  = rx_buffer[2];
 206:	40 91 1a 01 	lds	r20, 0x011A
 20a:	d5 01       	movw	r26, r10
 20c:	23 e0       	ldi	r18, 0x03	; 3
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	07 c0       	rjmp	.+14     	; 0x220 <main+0x116>
                  for(uint8_t i = 0; i < msg.length; i++)
                  {
                     msg.data[i] = rx_buffer[3 + i];
 212:	f9 01       	movw	r30, r18
 214:	e8 5e       	subi	r30, 0xE8	; 232
 216:	fe 4f       	sbci	r31, 0xFE	; 254
 218:	80 81       	ld	r24, Z
 21a:	8d 93       	st	X+, r24
 21c:	2f 5f       	subi	r18, 0xFF	; 255
 21e:	3f 4f       	sbci	r19, 0xFF	; 255
                  
                  CAN_msg msg;

                  msg.id      = (uint16_t)( (uint16_t)(rx_buffer[0] << 8) | (rx_buffer[1]) );
                  msg.length  = rx_buffer[2];
                  for(uint8_t i = 0; i < msg.length; i++)
 220:	82 2f       	mov	r24, r18
 222:	83 50       	subi	r24, 0x03	; 3
 224:	84 17       	cp	r24, r20
 226:	a8 f3       	brcs	.-22     	; 0x212 <main+0x108>
                  //uart1_puts("CRC decoded :)!!!\n");
                  
                  CAN_msg msg;

                  msg.id      = (uint16_t)( (uint16_t)(rx_buffer[0] << 8) | (rx_buffer[1]) );
                  msg.length  = rx_buffer[2];
 228:	4d 83       	std	Y+5, r20	; 0x05
               {
                  //uart1_puts("CRC decoded :)!!!\n");
                  
                  CAN_msg msg;

                  msg.id      = (uint16_t)( (uint16_t)(rx_buffer[0] << 8) | (rx_buffer[1]) );
 22a:	f5 2e       	mov	r15, r21
 22c:	ee 24       	eor	r14, r14
 22e:	89 2f       	mov	r24, r25
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	8e 29       	or	r24, r14
 234:	9f 29       	or	r25, r15
 236:	9a 83       	std	Y+2, r25	; 0x02
 238:	89 83       	std	Y+1, r24	; 0x01
                  {
                     msg.data[i] = rx_buffer[3 + i];
                  }

                  // Configure and send CAN Frame
                  CAN_Configure_MOb(MOb1, &msg);
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	b6 01       	movw	r22, r12
 23e:	0e 94 ed 03 	call	0x7da	; 0x7da <CAN_Configure_MOb>
                  CAN_MOb_action(MOb1, CMD_TX_DATA);
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	62 e0       	ldi	r22, 0x02	; 2
 246:	0e 94 1f 03 	call	0x63e	; 0x63e <CAN_MOb_action>

               }

               num_rx = 0;
 24a:	10 92 28 01 	sts	0x0128, r1
               rx_buffer[0] = 0;
 24e:	10 92 18 01 	sts	0x0118, r1
               // reset pointer to beginning of char[]
               p_rx = rx_buffer;
 252:	90 92 27 01 	sts	0x0127, r9
 256:	80 92 26 01 	sts	0x0126, r8

      }


      // Polling of CAN_MSG_RECEIVED -->actions for each MOb in rob_can_config
      if(CAN_MSG_RECEIVED != -1)
 25a:	80 91 b3 01 	lds	r24, 0x01B3
 25e:	8f 3f       	cpi	r24, 0xFF	; 255
 260:	09 f4       	brne	.+2      	; 0x264 <main+0x15a>
 262:	95 cf       	rjmp	.-214    	; 0x18e <main+0x84>
      {         
         CAN_Received_Action(CAN_MSG_RECEIVED);
 264:	80 91 b3 01 	lds	r24, 0x01B3
 268:	0e 94 4e 01 	call	0x29c	; 0x29c <CAN_Received_Action>

         // Reset status
         CAN_MSG_RECEIVED = -1;
 26c:	70 92 b3 01 	sts	0x01B3, r7
 270:	8e cf       	rjmp	.-228    	; 0x18e <main+0x84>

00000272 <crc_can>:

#include <avr/io.h>


uint16_t crc_can(uint16_t crc, uint8_t data)
{
 272:	9c 01       	movw	r18, r24
 274:	40 e0       	ldi	r20, 0x00	; 0
  
  for(i = 0; i < 8; i++)
  {
    if((crc ^ data) & 1)
    { 
      crc = (uint16_t)((crc >> 1) ^ 0xC599); 
 276:	e9 e9       	ldi	r30, 0x99	; 153
 278:	f5 ec       	ldi	r31, 0xC5	; 197
{
  uint8_t i;
  
  for(i = 0; i < 8; i++)
  {
    if((crc ^ data) & 1)
 27a:	86 2f       	mov	r24, r22
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	82 27       	eor	r24, r18
 280:	93 27       	eor	r25, r19
 282:	36 95       	lsr	r19
 284:	27 95       	ror	r18
 286:	80 ff       	sbrs	r24, 0
 288:	02 c0       	rjmp	.+4      	; 0x28e <crc_can+0x1c>
    { 
      crc = (uint16_t)((crc >> 1) ^ 0xC599); 
 28a:	2e 27       	eor	r18, r30
 28c:	3f 27       	eor	r19, r31

uint16_t crc_can(uint16_t crc, uint8_t data)
{
  uint8_t i;
  
  for(i = 0; i < 8; i++)
 28e:	4f 5f       	subi	r20, 0xFF	; 255
 290:	48 30       	cpi	r20, 0x08	; 8
 292:	11 f0       	breq	.+4      	; 0x298 <crc_can+0x26>
    }
    else
    {
      crc >>= 1;
    }
    data >>= 1;
 294:	66 95       	lsr	r22
 296:	f1 cf       	rjmp	.-30     	; 0x27a <crc_can+0x8>
  }
  return (crc);
}
 298:	c9 01       	movw	r24, r18
 29a:	08 95       	ret

0000029c <CAN_Received_Action>:
   CAN_Configure_MOb(MOb0, &rec_all);
   
}

void CAN_Received_Action(CAN_mob mob)
{
 29c:	ef 92       	push	r14
 29e:	ff 92       	push	r15
 2a0:	0f 93       	push	r16
 2a2:	1f 93       	push	r17
 2a4:	df 93       	push	r29
 2a6:	cf 93       	push	r28
 2a8:	cd b7       	in	r28, 0x3d	; 61
 2aa:	de b7       	in	r29, 0x3e	; 62
 2ac:	6c 97       	sbiw	r28, 0x1c	; 28
 2ae:	0f b6       	in	r0, 0x3f	; 63
 2b0:	f8 94       	cli
 2b2:	de bf       	out	0x3e, r29	; 62
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	cd bf       	out	0x3d, r28	; 61
   CAN_msg msg_received;

   // Action for each CAN Frame here

   //get received message
   CAN_Copy_MOb(mob, &msg_received);
 2b8:	8e 01       	movw	r16, r28
 2ba:	0f 5f       	subi	r16, 0xFF	; 255
 2bc:	1f 4f       	sbci	r17, 0xFF	; 255
 2be:	b8 01       	movw	r22, r16
 2c0:	0e 94 cb 03 	call	0x796	; 0x796 <CAN_Copy_MOb>
   // prepare UART Message
   unsigned char buffer[15];

   // no initialisation because of runtime issues ;)

   buffer[0] = 0xAA; // SOF
 2c4:	8a ea       	ldi	r24, 0xAA	; 170
 2c6:	8e 87       	std	Y+14, r24	; 0x0e
   buffer[1] = 0xAA; // SOF
 2c8:	8f 87       	std	Y+15, r24	; 0x0f
   buffer[2] = 0xAA; // SOF
 2ca:	88 8b       	std	Y+16, r24	; 0x10
   buffer[3] = 0xAA; // SOF
 2cc:	89 8b       	std	Y+17, r24	; 0x11

   buffer[4] = ((uint8_t) (msg_received.id >> 8));    // High Byte of ID
 2ce:	99 81       	ldd	r25, Y+1	; 0x01
 2d0:	8a 81       	ldd	r24, Y+2	; 0x02
 2d2:	8a 8b       	std	Y+18, r24	; 0x12
   buffer[5] = ((uint8_t) (msg_received.id & 0xFF));  // Low Byte of ID
 2d4:	9b 8b       	std	Y+19, r25	; 0x13
   buffer[6] = msg_received.length;                   // DLC
 2d6:	8d 81       	ldd	r24, Y+5	; 0x05
 2d8:	8c 8b       	std	Y+20, r24	; 0x14
 2da:	fe 01       	movw	r30, r28
 2dc:	36 96       	adiw	r30, 0x06	; 6
 2de:	de 01       	movw	r26, r28
 2e0:	55 96       	adiw	r26, 0x15	; 21

   for(uint8_t i = 0; i < msg_received.length; i++)
 2e2:	28 2f       	mov	r18, r24
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	2b 5f       	subi	r18, 0xFB	; 251
 2e8:	3f 4f       	sbci	r19, 0xFF	; 255
 2ea:	20 0f       	add	r18, r16
 2ec:	31 1f       	adc	r19, r17
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <CAN_Received_Action+0x58>
   {
      buffer[7 + i] = msg_received.data[i];
 2f0:	81 91       	ld	r24, Z+
 2f2:	8d 93       	st	X+, r24

   buffer[4] = ((uint8_t) (msg_received.id >> 8));    // High Byte of ID
   buffer[5] = ((uint8_t) (msg_received.id & 0xFF));  // Low Byte of ID
   buffer[6] = msg_received.length;                   // DLC

   for(uint8_t i = 0; i < msg_received.length; i++)
 2f4:	e2 17       	cp	r30, r18
 2f6:	f3 07       	cpc	r31, r19
 2f8:	d9 f7       	brne	.-10     	; 0x2f0 <CAN_Received_Action+0x54>
 2fa:	8e 01       	movw	r16, r28
 2fc:	02 5f       	subi	r16, 0xF2	; 242
 2fe:	1f 4f       	sbci	r17, 0xFF	; 255
   {
      buffer[7 + i] = msg_received.data[i];
   }

   for(uint8_t i = 0; i < 15; i++)
 300:	8d e1       	ldi	r24, 0x1D	; 29
 302:	e8 2e       	mov	r14, r24
 304:	f1 2c       	mov	r15, r1
 306:	ec 0e       	add	r14, r28
 308:	fd 1e       	adc	r15, r29
   {
      // Transmit UART Message
      uart1_putc(buffer[i]);
 30a:	f8 01       	movw	r30, r16
 30c:	81 91       	ld	r24, Z+
 30e:	8f 01       	movw	r16, r30
 310:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <uart1_putc>
   for(uint8_t i = 0; i < msg_received.length; i++)
   {
      buffer[7 + i] = msg_received.data[i];
   }

   for(uint8_t i = 0; i < 15; i++)
 314:	0e 15       	cp	r16, r14
 316:	1f 05       	cpc	r17, r15
 318:	c1 f7       	brne	.-16     	; 0x30a <CAN_Received_Action+0x6e>
   {
      // Transmit UART Message
      uart1_putc(buffer[i]);
   }   
       
}
 31a:	6c 96       	adiw	r28, 0x1c	; 28
 31c:	0f b6       	in	r0, 0x3f	; 63
 31e:	f8 94       	cli
 320:	de bf       	out	0x3e, r29	; 62
 322:	0f be       	out	0x3f, r0	; 63
 324:	cd bf       	out	0x3d, r28	; 61
 326:	cf 91       	pop	r28
 328:	df 91       	pop	r29
 32a:	1f 91       	pop	r17
 32c:	0f 91       	pop	r16
 32e:	ff 90       	pop	r15
 330:	ef 90       	pop	r14
 332:	08 95       	ret

00000334 <CAN_Config>:
//for uart
#include "uart.h"


void CAN_Config()
{
 334:	df 93       	push	r29
 336:	cf 93       	push	r28
 338:	cd b7       	in	r28, 0x3d	; 61
 33a:	de b7       	in	r29, 0x3e	; 62
 33c:	2d 97       	sbiw	r28, 0x0d	; 13
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	f8 94       	cli
 342:	de bf       	out	0x3e, r29	; 62
 344:	0f be       	out	0x3f, r0	; 63
 346:	cd bf       	out	0x3d, r28	; 61

// Your code here...
   CAN_msg rec_all;

   // >>>msg rec_all
   rec_all.id  = 0x000;
 348:	1a 82       	std	Y+2, r1	; 0x02
 34a:	19 82       	std	Y+1, r1	; 0x01
   rec_all.msk = RECEIVE_ALL;
 34c:	1c 82       	std	Y+4, r1	; 0x04
 34e:	1b 82       	std	Y+3, r1	; 0x03
   // msg rec_all<<<

   CAN_Configure_MOb(MOb0, &rec_all);
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	be 01       	movw	r22, r28
 354:	6f 5f       	subi	r22, 0xFF	; 255
 356:	7f 4f       	sbci	r23, 0xFF	; 255
 358:	0e 94 ed 03 	call	0x7da	; 0x7da <CAN_Configure_MOb>
   
}
 35c:	2d 96       	adiw	r28, 0x0d	; 13
 35e:	0f b6       	in	r0, 0x3f	; 63
 360:	f8 94       	cli
 362:	de bf       	out	0x3e, r29	; 62
 364:	0f be       	out	0x3f, r0	; 63
 366:	cd bf       	out	0x3d, r28	; 61
 368:	cf 91       	pop	r28
 36a:	df 91       	pop	r29
 36c:	08 95       	ret

0000036e <__vector_18>:
*/
#define  ENTER_CRITICAL_SECTION ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
#define  LEAVE_CRITICAL_SECTION }

ISR(CANIT_vect)
{
 36e:	1f 92       	push	r1
 370:	0f 92       	push	r0
 372:	0f b6       	in	r0, 0x3f	; 63
 374:	0f 92       	push	r0
 376:	11 24       	eor	r1, r1
 378:	2f 93       	push	r18
 37a:	3f 93       	push	r19
 37c:	8f 93       	push	r24
 37e:	9f 93       	push	r25
   // Begin atomic block here
   ENTER_CRITICAL_SECTION
 380:	3f b7       	in	r19, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 382:	f8 94       	cli
   uint8_t canpage = 0;
   uint8_t MOb;
   //CAN_msg msg_received;

   // save MOb page register
   canpage = CANPAGE;
 384:	20 91 ed 00 	lds	r18, 0x00ED
   
   // If CANSIT = 0 (no MOb), the return value is 0xF --> General Interrupt
   if ((CANHPMOB & 0xF0) != 0xF0)
 388:	80 91 ec 00 	lds	r24, 0x00EC
 38c:	80 7f       	andi	r24, 0xF0	; 240
 38e:	80 3f       	cpi	r24, 0xF0	; 240
 390:	09 f4       	brne	.+2      	; 0x394 <__vector_18+0x26>
 392:	59 c0       	rjmp	.+178    	; 0x446 <__vector_18+0xd8>
   {
      
      // select MOb page with the highest priority
      CANPAGE = (CANHPMOB & 0xF0);
 394:	80 91 ec 00 	lds	r24, 0x00EC
 398:	80 7f       	andi	r24, 0xF0	; 240
 39a:	80 93 ed 00 	sts	0x00ED, r24
      MOb = (CANHPMOB >> 4);
 39e:	90 91 ec 00 	lds	r25, 0x00EC
      
      //------Data Length Code Warning------------------------------------------
      if(CANSTMOB & (1 << DLCW))
 3a2:	80 91 ee 00 	lds	r24, 0x00EE
 3a6:	87 ff       	sbrs	r24, 7
 3a8:	05 c0       	rjmp	.+10     	; 0x3b4 <__vector_18+0x46>
      {
         CANSTMOB &= ~(1 << DLCW);
 3aa:	80 91 ee 00 	lds	r24, 0x00EE
 3ae:	8f 77       	andi	r24, 0x7F	; 127
 3b0:	80 93 ee 00 	sts	0x00EE, r24
      }
      //------Transmit OK-------------------------------------------------------
      if(CANSTMOB & (1 << TXOK))
 3b4:	80 91 ee 00 	lds	r24, 0x00EE
 3b8:	86 ff       	sbrs	r24, 6
 3ba:	05 c0       	rjmp	.+10     	; 0x3c6 <__vector_18+0x58>
      {
         CANSTMOB &= ~(1 << TXOK);
 3bc:	80 91 ee 00 	lds	r24, 0x00EE
 3c0:	8f 7b       	andi	r24, 0xBF	; 191
 3c2:	80 93 ee 00 	sts	0x00EE, r24
      }
      //------Receive OK--------------------------------------------------------
      if(CANSTMOB & (1 << RXOK))
 3c6:	80 91 ee 00 	lds	r24, 0x00EE
 3ca:	85 ff       	sbrs	r24, 5
 3cc:	0e c0       	rjmp	.+28     	; 0x3ea <__vector_18+0x7c>
      {
         CANSTMOB &= ~(1 << RXOK);
 3ce:	80 91 ee 00 	lds	r24, 0x00EE
 3d2:	8f 7d       	andi	r24, 0xDF	; 223
 3d4:	80 93 ee 00 	sts	0x00EE, r24
         
         // signal a new message
         CAN_MSG_RECEIVED = MOb;
 3d8:	92 95       	swap	r25
 3da:	9f 70       	andi	r25, 0x0F	; 15
 3dc:	90 93 b3 01 	sts	0x01B3, r25
         
         // re-enable receive operating mode
         CANCDMOB |= (1<<CONMOB1); 
 3e0:	80 91 ef 00 	lds	r24, 0x00EF
 3e4:	80 68       	ori	r24, 0x80	; 128
 3e6:	80 93 ef 00 	sts	0x00EF, r24
      }
      //------Bit Error (Only in Transmission)----------------------------------
      if(CANSTMOB & (1 << BERR))
 3ea:	80 91 ee 00 	lds	r24, 0x00EE
 3ee:	84 ff       	sbrs	r24, 4
 3f0:	05 c0       	rjmp	.+10     	; 0x3fc <__vector_18+0x8e>
      {
         CANSTMOB &= ~(1 << BERR);
 3f2:	80 91 ee 00 	lds	r24, 0x00EE
 3f6:	8f 7e       	andi	r24, 0xEF	; 239
 3f8:	80 93 ee 00 	sts	0x00EE, r24
      }
      //------Stuff Error-------------------------------------------------------
      if(CANSTMOB & (1 << SERR))
 3fc:	80 91 ee 00 	lds	r24, 0x00EE
 400:	83 ff       	sbrs	r24, 3
 402:	05 c0       	rjmp	.+10     	; 0x40e <__vector_18+0xa0>
      {
         CANSTMOB &= ~(1 << SERR);
 404:	80 91 ee 00 	lds	r24, 0x00EE
 408:	87 7f       	andi	r24, 0xF7	; 247
 40a:	80 93 ee 00 	sts	0x00EE, r24
      }
      //------CRC Error---------------------------------------------------------
      if(CANSTMOB & (1 << CERR))
 40e:	80 91 ee 00 	lds	r24, 0x00EE
 412:	82 ff       	sbrs	r24, 2
 414:	05 c0       	rjmp	.+10     	; 0x420 <__vector_18+0xb2>
      {
         CANSTMOB &= ~(1 << CERR);
 416:	80 91 ee 00 	lds	r24, 0x00EE
 41a:	8b 7f       	andi	r24, 0xFB	; 251
 41c:	80 93 ee 00 	sts	0x00EE, r24
      }
      //------Form Error--------------------------------------------------------
      if(CANSTMOB & (1 << FERR))
 420:	80 91 ee 00 	lds	r24, 0x00EE
 424:	81 ff       	sbrs	r24, 1
 426:	05 c0       	rjmp	.+10     	; 0x432 <__vector_18+0xc4>
      {
         CANSTMOB &= ~(1 << FERR);
 428:	80 91 ee 00 	lds	r24, 0x00EE
 42c:	8d 7f       	andi	r24, 0xFD	; 253
 42e:	80 93 ee 00 	sts	0x00EE, r24
      }
      //------Acknowledgment Error----------------------------------------------
      if(CANSTMOB & (1 << AERR))
 432:	80 91 ee 00 	lds	r24, 0x00EE
 436:	80 ff       	sbrs	r24, 0
 438:	45 c0       	rjmp	.+138    	; 0x4c4 <__vector_18+0x156>
      {
         CANSTMOB &= ~(1 << AERR);
 43a:	80 91 ee 00 	lds	r24, 0x00EE
 43e:	8e 7f       	andi	r24, 0xFE	; 254
 440:	80 93 ee 00 	sts	0x00EE, r24
 444:	3f c0       	rjmp	.+126    	; 0x4c4 <__vector_18+0x156>
      // no MOb matches with the interrupt => general interrupt
      
      // check CAN General Interrupt Registers
      
      //------Bus Off Interrupt Flag--------------------------------------------
      if(CANGIT & (1 << BOFFIT))
 446:	80 91 da 00 	lds	r24, 0x00DA
 44a:	86 ff       	sbrs	r24, 6
 44c:	05 c0       	rjmp	.+10     	; 0x458 <__vector_18+0xea>
      {
         // reset flag, write a logical one
         CANGIT |= (1 << BOFFIT);
 44e:	80 91 da 00 	lds	r24, 0x00DA
 452:	80 64       	ori	r24, 0x40	; 64
 454:	80 93 da 00 	sts	0x00DA, r24
      }
      //------Overrun CAN Timer-------------------------------------------------
      if(CANGIT & (1 << OVRTIM))
 458:	80 91 da 00 	lds	r24, 0x00DA
 45c:	85 ff       	sbrs	r24, 5
 45e:	05 c0       	rjmp	.+10     	; 0x46a <__vector_18+0xfc>
      {
         // reset flag, write a logical one
         CANGIT |= (1 << OVRTIM);
 460:	80 91 da 00 	lds	r24, 0x00DA
 464:	80 62       	ori	r24, 0x20	; 32
 466:	80 93 da 00 	sts	0x00DA, r24
      }
      //------Frame Buffer Receive Interrupt------------------------------------
      if(CANGIT & (1 << BXOK))
 46a:	80 91 da 00 	lds	r24, 0x00DA
 46e:	84 ff       	sbrs	r24, 4
 470:	05 c0       	rjmp	.+10     	; 0x47c <__vector_18+0x10e>
      {
         // reset flag, write a logical one
         CANGIT |= (1 << BXOK);
 472:	80 91 da 00 	lds	r24, 0x00DA
 476:	80 61       	ori	r24, 0x10	; 16
 478:	80 93 da 00 	sts	0x00DA, r24
      }
      //------Stuff Error General-----------------------------------------------
      if(CANGIT & (1 << SERG))
 47c:	80 91 da 00 	lds	r24, 0x00DA
 480:	83 ff       	sbrs	r24, 3
 482:	05 c0       	rjmp	.+10     	; 0x48e <__vector_18+0x120>
      {
         // reset flag, write a logical one
         CANGIT |= (1 << SERG);
 484:	80 91 da 00 	lds	r24, 0x00DA
 488:	88 60       	ori	r24, 0x08	; 8
 48a:	80 93 da 00 	sts	0x00DA, r24
      }
      //------CRC Error General-------------------------------------------------
      if(CANGIT & (1 << CERG))
 48e:	80 91 da 00 	lds	r24, 0x00DA
 492:	82 ff       	sbrs	r24, 2
 494:	05 c0       	rjmp	.+10     	; 0x4a0 <__vector_18+0x132>
      {
         // reset flag, write a logical one
         CANGIT |= (1 << CERG);
 496:	80 91 da 00 	lds	r24, 0x00DA
 49a:	84 60       	ori	r24, 0x04	; 4
 49c:	80 93 da 00 	sts	0x00DA, r24
      }
      //------Form Error General------------------------------------------------
      if(CANGIT & (1 << FERG))
 4a0:	80 91 da 00 	lds	r24, 0x00DA
 4a4:	81 ff       	sbrs	r24, 1
 4a6:	05 c0       	rjmp	.+10     	; 0x4b2 <__vector_18+0x144>
      {
         // reset flag, write a logical one
         CANGIT |= (1 << FERG);
 4a8:	80 91 da 00 	lds	r24, 0x00DA
 4ac:	82 60       	ori	r24, 0x02	; 2
 4ae:	80 93 da 00 	sts	0x00DA, r24
      }
      //------Acknowledgment Error General--------------------------------------
      if(CANGIT & (1 << AERG))
 4b2:	80 91 da 00 	lds	r24, 0x00DA
 4b6:	80 ff       	sbrs	r24, 0
 4b8:	05 c0       	rjmp	.+10     	; 0x4c4 <__vector_18+0x156>
      {
         // reset flag, write a logical one
         CANGIT |= (1 << AERG);
 4ba:	80 91 da 00 	lds	r24, 0x00DA
 4be:	81 60       	ori	r24, 0x01	; 1
 4c0:	80 93 da 00 	sts	0x00DA, r24
      }
      
   }
   // restore MOb page register
   CANPAGE = canpage;
 4c4:	20 93 ed 00 	sts	0x00ED, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 4c8:	3f bf       	out	0x3f, r19	; 63
   
   // end atomic block here
   LEAVE_CRITICAL_SECTION
   
}
 4ca:	9f 91       	pop	r25
 4cc:	8f 91       	pop	r24
 4ce:	3f 91       	pop	r19
 4d0:	2f 91       	pop	r18
 4d2:	0f 90       	pop	r0
 4d4:	0f be       	out	0x3f, r0	; 63
 4d6:	0f 90       	pop	r0
 4d8:	1f 90       	pop	r1
 4da:	18 95       	reti

000004dc <CAN_get_mob>:
#include "rob_can_private.h"

void CAN_get_mob(uint8_t mob)
{
   //Only MObs from 0-14 allowed
   if(mob < 15)
 4dc:	8f 30       	cpi	r24, 0x0F	; 15
 4de:	20 f4       	brcc	.+8      	; 0x4e8 <CAN_get_mob+0xc>
   {
      CANPAGE = (mob << 4);
 4e0:	82 95       	swap	r24
 4e2:	80 7f       	andi	r24, 0xF0	; 240
 4e4:	80 93 ed 00 	sts	0x00ED, r24
 4e8:	08 95       	ret

000004ea <CAN_enable_mob_interrupt>:
   }
}

void CAN_enable_mob_interrupt(uint8_t mob)
{
 4ea:	38 2f       	mov	r19, r24
   if (mob < 8)
 4ec:	88 30       	cpi	r24, 0x08	; 8
 4ee:	68 f4       	brcc	.+26     	; 0x50a <CAN_enable_mob_interrupt+0x20>
      CANIE2 |= (1 << mob);
 4f0:	20 91 de 00 	lds	r18, 0x00DE
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <CAN_enable_mob_interrupt+0x14>
 4fa:	88 0f       	add	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	3a 95       	dec	r19
 500:	e2 f7       	brpl	.-8      	; 0x4fa <CAN_enable_mob_interrupt+0x10>
 502:	28 2b       	or	r18, r24
 504:	20 93 de 00 	sts	0x00DE, r18
 508:	08 95       	ret
   else
      CANIE1 |= (1 << (mob - 8));
 50a:	40 91 df 00 	lds	r20, 0x00DF
 50e:	28 2f       	mov	r18, r24
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	28 50       	subi	r18, 0x08	; 8
 514:	30 40       	sbci	r19, 0x00	; 0
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	02 c0       	rjmp	.+4      	; 0x520 <CAN_enable_mob_interrupt+0x36>
 51c:	88 0f       	add	r24, r24
 51e:	99 1f       	adc	r25, r25
 520:	2a 95       	dec	r18
 522:	e2 f7       	brpl	.-8      	; 0x51c <CAN_enable_mob_interrupt+0x32>
 524:	48 2b       	or	r20, r24
 526:	40 93 df 00 	sts	0x00DF, r20
 52a:	08 95       	ret

0000052c <CAN_disable_mob_interrupt>:
}

void CAN_disable_mob_interrupt(uint8_t mob)
{
 52c:	38 2f       	mov	r19, r24
   if (mob < 8)
 52e:	88 30       	cpi	r24, 0x08	; 8
 530:	70 f4       	brcc	.+28     	; 0x54e <CAN_disable_mob_interrupt+0x22>
      CANIE2 &= ~(1 << mob);
 532:	20 91 de 00 	lds	r18, 0x00DE
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	02 c0       	rjmp	.+4      	; 0x540 <CAN_disable_mob_interrupt+0x14>
 53c:	88 0f       	add	r24, r24
 53e:	99 1f       	adc	r25, r25
 540:	3a 95       	dec	r19
 542:	e2 f7       	brpl	.-8      	; 0x53c <CAN_disable_mob_interrupt+0x10>
 544:	80 95       	com	r24
 546:	82 23       	and	r24, r18
 548:	80 93 de 00 	sts	0x00DE, r24
 54c:	08 95       	ret
   else
      CANIE1 &= ~(1 << (mob - 8));
 54e:	40 91 df 00 	lds	r20, 0x00DF
 552:	28 2f       	mov	r18, r24
 554:	30 e0       	ldi	r19, 0x00	; 0
 556:	28 50       	subi	r18, 0x08	; 8
 558:	30 40       	sbci	r19, 0x00	; 0
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	02 c0       	rjmp	.+4      	; 0x564 <CAN_disable_mob_interrupt+0x38>
 560:	88 0f       	add	r24, r24
 562:	99 1f       	adc	r25, r25
 564:	2a 95       	dec	r18
 566:	e2 f7       	brpl	.-8      	; 0x560 <CAN_disable_mob_interrupt+0x34>
 568:	80 95       	com	r24
 56a:	84 23       	and	r24, r20
 56c:	80 93 df 00 	sts	0x00DF, r24
 570:	08 95       	ret

00000572 <CAN_set_id>:
}

void CAN_set_id(uint16_t id)
{
   // only 11-bit IDs
      CANIDT4 = 0;
 572:	10 92 f0 00 	sts	0x00F0, r1
      CANIDT3 = 0;
 576:	10 92 f1 00 	sts	0x00F1, r1
      CANIDT2 = (uint8_t) id << 5;
 57a:	28 2f       	mov	r18, r24
 57c:	22 95       	swap	r18
 57e:	22 0f       	add	r18, r18
 580:	20 7e       	andi	r18, 0xE0	; 224
 582:	20 93 f2 00 	sts	0x00F2, r18
      CANIDT1 = (uint16_t)id >> 3;
 586:	23 e0       	ldi	r18, 0x03	; 3
 588:	96 95       	lsr	r25
 58a:	87 95       	ror	r24
 58c:	2a 95       	dec	r18
 58e:	e1 f7       	brne	.-8      	; 0x588 <CAN_set_id+0x16>
 590:	80 93 f3 00 	sts	0x00F3, r24
      
      // no IDE
      CANCDMOB &= (~(1<<IDE));
 594:	ef ee       	ldi	r30, 0xEF	; 239
 596:	f0 e0       	ldi	r31, 0x00	; 0
 598:	80 81       	ld	r24, Z
 59a:	8f 7e       	andi	r24, 0xEF	; 239
 59c:	80 83       	st	Z, r24
}
 59e:	08 95       	ret

000005a0 <CAN_get_id>:
uint16_t CAN_get_id()
{
   uint16_t id;
   id = 0;

   id  = (uint8_t)CANIDT2  >> 5;
 5a0:	80 91 f2 00 	lds	r24, 0x00F2
 5a4:	82 95       	swap	r24
 5a6:	86 95       	lsr	r24
 5a8:	87 70       	andi	r24, 0x07	; 7
 5aa:	90 e0       	ldi	r25, 0x00	; 0
   id |= (uint16_t)CANIDT1 << 3;
 5ac:	20 91 f3 00 	lds	r18, 0x00F3
 5b0:	30 e0       	ldi	r19, 0x00	; 0
 5b2:	43 e0       	ldi	r20, 0x03	; 3
 5b4:	22 0f       	add	r18, r18
 5b6:	33 1f       	adc	r19, r19
 5b8:	4a 95       	dec	r20
 5ba:	e1 f7       	brne	.-8      	; 0x5b4 <CAN_get_id+0x14>
 5bc:	28 2b       	or	r18, r24
 5be:	39 2b       	or	r19, r25

   return id;
}
 5c0:	c9 01       	movw	r24, r18
 5c2:	08 95       	ret

000005c4 <CAN_set_id_mask>:

void CAN_set_id_mask(uint16_t idm)
{
   // only 11-bit IDs
   CANIDM4 = (1 << IDEMSK); //receive only standard frames
 5c4:	21 e0       	ldi	r18, 0x01	; 1
 5c6:	20 93 f4 00 	sts	0x00F4, r18
   CANIDM3 = 0;
 5ca:	10 92 f5 00 	sts	0x00F5, r1
   CANIDM2 = (uint8_t) idm << 5; 
 5ce:	28 2f       	mov	r18, r24
 5d0:	22 95       	swap	r18
 5d2:	22 0f       	add	r18, r18
 5d4:	20 7e       	andi	r18, 0xE0	; 224
 5d6:	20 93 f6 00 	sts	0x00F6, r18
   CANIDM1 = (uint16_t)idm >> 3;
 5da:	53 e0       	ldi	r21, 0x03	; 3
 5dc:	96 95       	lsr	r25
 5de:	87 95       	ror	r24
 5e0:	5a 95       	dec	r21
 5e2:	e1 f7       	brne	.-8      	; 0x5dc <CAN_set_id_mask+0x18>
 5e4:	80 93 f7 00 	sts	0x00F7, r24
}
 5e8:	08 95       	ret

000005ea <CAN_set_dlc>:

void CAN_set_dlc(uint8_t dlc)
{
	// delete old CANCDMOB
	CANCDMOB = 0x00;
 5ea:	ef ee       	ldi	r30, 0xEF	; 239
 5ec:	f0 e0       	ldi	r31, 0x00	; 0
 5ee:	10 82       	st	Z, r1
   // write DLC (Data Length Code)
   CANCDMOB |= dlc;
 5f0:	90 81       	ld	r25, Z
 5f2:	98 2b       	or	r25, r24
 5f4:	90 83       	st	Z, r25
}
 5f6:	08 95       	ret

000005f8 <CAN_get_dlc>:

uint8_t CAN_get_dlc()
{
   uint8_t dlc;

   dlc = (CANCDMOB & 0x0F);
 5f8:	80 91 ef 00 	lds	r24, 0x00EF

   return dlc;
}
 5fc:	8f 70       	andi	r24, 0x0F	; 15
 5fe:	08 95       	ret

00000600 <CAN_set_data>:

void CAN_set_data(uint8_t dlc, uint8_t *data)
{
 600:	48 2f       	mov	r20, r24
}

void CAN_set_dlc(uint8_t dlc)
{
	// delete old CANCDMOB
	CANCDMOB = 0x00;
 602:	10 92 ef 00 	sts	0x00EF, r1
   // write DLC (Data Length Code)
   CANCDMOB |= dlc;
 606:	80 91 ef 00 	lds	r24, 0x00EF
 60a:	84 2b       	or	r24, r20
 60c:	80 93 ef 00 	sts	0x00EF, r24
 610:	fb 01       	movw	r30, r22
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	04 c0       	rjmp	.+8      	; 0x61e <CAN_set_data+0x1e>
   
   CAN_set_dlc(dlc);
   
   for(i = 0; i < dlc; i++)
   {
      CANMSG = data[i];
 616:	81 91       	ld	r24, Z+
 618:	80 93 fa 00 	sts	0x00FA, r24
{
   uint8_t i;
   
   CAN_set_dlc(dlc);
   
   for(i = 0; i < dlc; i++)
 61c:	9f 5f       	subi	r25, 0xFF	; 255
 61e:	94 17       	cp	r25, r20
 620:	d0 f3       	brcs	.-12     	; 0x616 <CAN_set_data+0x16>
   {
      CANMSG = data[i];
   }
}
 622:	08 95       	ret

00000624 <CAN_Reply_Ready>:
}

void CAN_Reply_Ready(CAN_mob mob)
{
   // select MOb
   CAN_get_mob(mob);
 624:	0e 94 6e 02 	call	0x4dc	; 0x4dc <CAN_get_mob>

   // Restore RTRTAG and RPLV to 1, Auto Reply Mode
   CANIDT4  |= (1<<RTRTAG);
 628:	e0 ef       	ldi	r30, 0xF0	; 240
 62a:	f0 e0       	ldi	r31, 0x00	; 0
 62c:	80 81       	ld	r24, Z
 62e:	84 60       	ori	r24, 0x04	; 4
 630:	80 83       	st	Z, r24
   CANCDMOB |= (1<<RPLV);
 632:	ef ee       	ldi	r30, 0xEF	; 239
 634:	f0 e0       	ldi	r31, 0x00	; 0
 636:	80 81       	ld	r24, Z
 638:	80 62       	ori	r24, 0x20	; 32
 63a:	80 83       	st	Z, r24
   
}
 63c:	08 95       	ret

0000063e <CAN_MOb_action>:
|                    |           |           | (reply mode)        |
|------------------------------------------------------------------|
*/
// This functions assumes the MOb being properly configured!
uint8_t CAN_MOb_action(CAN_mob mob, CAN_action action)
{
 63e:	1f 93       	push	r17
 640:	16 2f       	mov	r17, r22
   // select MOb
   CAN_get_mob(mob);
 642:	0e 94 6e 02 	call	0x4dc	; 0x4dc <CAN_get_mob>
   
   switch(action)
 646:	15 30       	cpi	r17, 0x05	; 5
 648:	09 f4       	brne	.+2      	; 0x64c <CAN_MOb_action+0xe>
 64a:	49 c0       	rjmp	.+146    	; 0x6de <CAN_MOb_action+0xa0>
 64c:	16 30       	cpi	r17, 0x06	; 6
 64e:	60 f4       	brcc	.+24     	; 0x668 <CAN_MOb_action+0x2a>
 650:	12 30       	cpi	r17, 0x02	; 2
 652:	19 f1       	breq	.+70     	; 0x69a <CAN_MOb_action+0x5c>
 654:	13 30       	cpi	r17, 0x03	; 3
 656:	18 f4       	brcc	.+6      	; 0x65e <CAN_MOb_action+0x20>
 658:	11 30       	cpi	r17, 0x01	; 1
 65a:	91 f4       	brne	.+36     	; 0x680 <CAN_MOb_action+0x42>
 65c:	13 c0       	rjmp	.+38     	; 0x684 <CAN_MOb_action+0x46>
 65e:	13 30       	cpi	r17, 0x03	; 3
 660:	51 f1       	breq	.+84     	; 0x6b6 <CAN_MOb_action+0x78>
 662:	14 30       	cpi	r17, 0x04	; 4
 664:	69 f4       	brne	.+26     	; 0x680 <CAN_MOb_action+0x42>
 666:	37 c0       	rjmp	.+110    	; 0x6d6 <CAN_MOb_action+0x98>
 668:	17 30       	cpi	r17, 0x07	; 7
 66a:	09 f4       	brne	.+2      	; 0x66e <CAN_MOb_action+0x30>
 66c:	5b c0       	rjmp	.+182    	; 0x724 <CAN_MOb_action+0xe6>
 66e:	17 30       	cpi	r17, 0x07	; 7
 670:	08 f4       	brcc	.+2      	; 0x674 <CAN_MOb_action+0x36>
 672:	45 c0       	rjmp	.+138    	; 0x6fe <CAN_MOb_action+0xc0>
 674:	18 30       	cpi	r17, 0x08	; 8
 676:	09 f4       	brne	.+2      	; 0x67a <CAN_MOb_action+0x3c>
 678:	6d c0       	rjmp	.+218    	; 0x754 <CAN_MOb_action+0x116>
 67a:	19 30       	cpi	r17, 0x09	; 9
 67c:	09 f4       	brne	.+2      	; 0x680 <CAN_MOb_action+0x42>
 67e:	6a c0       	rjmp	.+212    	; 0x754 <CAN_MOb_action+0x116>
 680:	80 e0       	ldi	r24, 0x00	; 0
 682:	87 c0       	rjmp	.+270    	; 0x792 <CAN_MOb_action+0x154>
   {
     case CMD_DISABLED:
       CANCDMOB = 0;
 684:	10 92 ef 00 	sts	0x00EF, r1
       CANIDT4  &= ~(1<<RTRTAG);
 688:	80 91 f0 00 	lds	r24, 0x00F0
 68c:	8b 7f       	andi	r24, 0xFB	; 251
 68e:	80 93 f0 00 	sts	0x00F0, r24
       CANIDM4  &= ~(1<<RTRMSK);
 692:	80 91 f4 00 	lds	r24, 0x00F4
 696:	8b 7f       	andi	r24, 0xFB	; 251
 698:	79 c0       	rjmp	.+242    	; 0x78c <CAN_MOb_action+0x14e>
     break;
     //------------   

     case CMD_TX_DATA:
       // Disable MOb
       CANCDMOB &= ~((1<<CONMOB1)|(1<<CONMOB0));
 69a:	80 91 ef 00 	lds	r24, 0x00EF
 69e:	8f 73       	andi	r24, 0x3F	; 63
 6a0:	80 93 ef 00 	sts	0x00EF, r24

       CANIDT4  &= ~(1<<RTRTAG);
 6a4:	80 91 f0 00 	lds	r24, 0x00F0
 6a8:	8b 7f       	andi	r24, 0xFB	; 251
 6aa:	80 93 f0 00 	sts	0x00F0, r24
       CANCDMOB &= ~(1<<RPLV);
 6ae:	80 91 ef 00 	lds	r24, 0x00EF
 6b2:	8f 7d       	andi	r24, 0xDF	; 223
 6b4:	08 c0       	rjmp	.+16     	; 0x6c6 <CAN_MOb_action+0x88>
       break;
     //------------   
        
     case CMD_TX_REMOTE:       
       // Set RTR
       CANIDT4  |= (1  << RTRTAG);
 6b6:	80 91 f0 00 	lds	r24, 0x00F0
 6ba:	84 60       	ori	r24, 0x04	; 4
 6bc:	80 93 f0 00 	sts	0x00F0, r24
       
       // Disable MOb
       CANCDMOB &= ~((1<<CONMOB1)|(1<<CONMOB0));
 6c0:	80 91 ef 00 	lds	r24, 0x00EF
 6c4:	8f 73       	andi	r24, 0x3F	; 63
 6c6:	80 93 ef 00 	sts	0x00EF, r24
       // Configure as TX
       CANCDMOB |= (1  << CONMOB0);
 6ca:	80 91 ef 00 	lds	r24, 0x00EF
 6ce:	80 64       	ori	r24, 0x40	; 64
 6d0:	80 93 ef 00 	sts	0x00EF, r24
 6d4:	5d c0       	rjmp	.+186    	; 0x790 <CAN_MOb_action+0x152>
       break;
     //------------  
            
     case CMD_RX_ALL:
       CANIDM1   = 0;
 6d6:	10 92 f7 00 	sts	0x00F7, r1
       CANIDM2   = 0;
 6da:	10 92 f6 00 	sts	0x00F6, r1
       CANCDMOB |= (1  <<CONMOB1);
       break;
     //------------

     case CMD_RX_MASKED:
       CANIDM4  |=  (1 << IDEMSK); // to receive only standard frames
 6de:	80 91 f4 00 	lds	r24, 0x00F4
 6e2:	81 60       	ori	r24, 0x01	; 1
 6e4:	80 93 f4 00 	sts	0x00F4, r24
       CANIDT4  &= ~(1 << RTRTAG);
 6e8:	80 91 f0 00 	lds	r24, 0x00F0
 6ec:	8b 7f       	andi	r24, 0xFB	; 251
 6ee:	80 93 f0 00 	sts	0x00F0, r24
       
       // Disable MOb
       CANCDMOB &= ~((1<<CONMOB1)|(1<<CONMOB0));
 6f2:	80 91 ef 00 	lds	r24, 0x00EF
 6f6:	8f 73       	andi	r24, 0x3F	; 63
 6f8:	80 93 ef 00 	sts	0x00EF, r24
 6fc:	27 c0       	rjmp	.+78     	; 0x74c <CAN_MOb_action+0x10e>
       break;
     //------------  
          
     case CMD_RX_REMOTE:
       // Disable MOb
       CANCDMOB &= ~((1<<CONMOB1)|(1<<CONMOB0));
 6fe:	80 91 ef 00 	lds	r24, 0x00EF
 702:	8f 73       	andi	r24, 0x3F	; 63
 704:	80 93 ef 00 	sts	0x00EF, r24

        CANIDM4  |= (1<<RTRMSK);
 708:	80 91 f4 00 	lds	r24, 0x00F4
 70c:	84 60       	ori	r24, 0x04	; 4
 70e:	80 93 f4 00 	sts	0x00F4, r24
        CANIDT4  |= (1  << RTRTAG);
 712:	80 91 f0 00 	lds	r24, 0x00F0
 716:	84 60       	ori	r24, 0x04	; 4
 718:	80 93 f0 00 	sts	0x00F0, r24
        CANCDMOB &= ~(1<<RPLV);
 71c:	80 91 ef 00 	lds	r24, 0x00EF
 720:	8f 7d       	andi	r24, 0xDF	; 223
 722:	0d c0       	rjmp	.+26     	; 0x73e <CAN_MOb_action+0x100>
       break;
     //------------    
           
     case CMD_RX_REMOTE_MASKED:
       // Disable MOb
       CANCDMOB &= ~((1<<CONMOB1)|(1<<CONMOB0));
 724:	80 91 ef 00 	lds	r24, 0x00EF
 728:	8f 73       	andi	r24, 0x3F	; 63
 72a:	80 93 ef 00 	sts	0x00EF, r24

       CANIDM4  |= (1<<RTRMSK);
 72e:	80 91 f4 00 	lds	r24, 0x00F4
 732:	84 60       	ori	r24, 0x04	; 4
 734:	80 93 f4 00 	sts	0x00F4, r24

       CANCDMOB |= (1<<RPLV);
 738:	80 91 ef 00 	lds	r24, 0x00EF
 73c:	80 62       	ori	r24, 0x20	; 32
 73e:	80 93 ef 00 	sts	0x00EF, r24
       CANIDM4  |=  (1 << IDEMSK); // to receive only standard frames
 742:	80 91 f4 00 	lds	r24, 0x00F4
 746:	81 60       	ori	r24, 0x01	; 1
 748:	80 93 f4 00 	sts	0x00F4, r24
       
       // Configure as RX
       CANCDMOB |= (1  <<CONMOB1);
 74c:	80 91 ef 00 	lds	r24, 0x00EF
 750:	80 68       	ori	r24, 0x80	; 128
 752:	be cf       	rjmp	.-132    	; 0x6d0 <CAN_MOb_action+0x92>
       break;
     //------------    
       
     case CMD_REPLY_MASKED:
       // Disable MOb
       CANCDMOB &= ~((1<<CONMOB1)|(1<<CONMOB0));
 754:	80 91 ef 00 	lds	r24, 0x00EF
 758:	8f 73       	andi	r24, 0x3F	; 63
 75a:	80 93 ef 00 	sts	0x00EF, r24
       // Configure as RX
       CANCDMOB |= (1  <<CONMOB1);
 75e:	80 91 ef 00 	lds	r24, 0x00EF
 762:	80 68       	ori	r24, 0x80	; 128
 764:	80 93 ef 00 	sts	0x00EF, r24

       CANCDMOB |= (1<<RPLV);
 768:	80 91 ef 00 	lds	r24, 0x00EF
 76c:	80 62       	ori	r24, 0x20	; 32
 76e:	80 93 ef 00 	sts	0x00EF, r24
       CANIDT4  |= (1<<RTRTAG);
 772:	80 91 f0 00 	lds	r24, 0x00F0
 776:	84 60       	ori	r24, 0x04	; 4
 778:	80 93 f0 00 	sts	0x00F0, r24
       CANIDM4  |= (1<<RTRMSK); 
 77c:	80 91 f4 00 	lds	r24, 0x00F4
 780:	84 60       	ori	r24, 0x04	; 4
 782:	80 93 f4 00 	sts	0x00F4, r24
       CANIDM4  |= (1 << IDEMSK); // to receive only standard frames
 786:	80 91 f4 00 	lds	r24, 0x00F4
 78a:	81 60       	ori	r24, 0x01	; 1
 78c:	80 93 f4 00 	sts	0x00F4, r24
 790:	81 e0       	ldi	r24, 0x01	; 1
       return 0;
       break;
     //------------
   }
   return 1;
}
 792:	1f 91       	pop	r17
 794:	08 95       	ret

00000796 <CAN_Copy_MOb>:

void CAN_Copy_MOb(CAN_mob mob, CAN_msg *msg)
{
 796:	cf 93       	push	r28
 798:	df 93       	push	r29
 79a:	eb 01       	movw	r28, r22
   uint8_t i;

   // select MOb
   CAN_get_mob(mob);
 79c:	0e 94 6e 02 	call	0x4dc	; 0x4dc <CAN_get_mob>

   msg->id     = CAN_get_id();
 7a0:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <CAN_get_id>
 7a4:	99 83       	std	Y+1, r25	; 0x01
 7a6:	88 83       	st	Y, r24
   msg->length = CAN_get_dlc();
 7a8:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <CAN_get_dlc>
 7ac:	8c 83       	std	Y+4, r24	; 0x04
 7ae:	fe 01       	movw	r30, r28
 7b0:	80 e0       	ldi	r24, 0x00	; 0

   // clear first
	for(i = 0; i < 8; i++)	
	{	
	  msg->data[i] = 0;
 7b2:	15 82       	std	Z+5, r1	; 0x05

   msg->id     = CAN_get_id();
   msg->length = CAN_get_dlc();

   // clear first
	for(i = 0; i < 8; i++)	
 7b4:	8f 5f       	subi	r24, 0xFF	; 255
 7b6:	31 96       	adiw	r30, 0x01	; 1
 7b8:	88 30       	cpi	r24, 0x08	; 8
 7ba:	d9 f7       	brne	.-10     	; 0x7b2 <CAN_Copy_MOb+0x1c>
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	07 c0       	rjmp	.+14     	; 0x7ce <CAN_Copy_MOb+0x38>
	  msg->data[i] = 0;
	}

   for(i = 0; i < msg->length; i++)
   {
      msg->data[i] = CANMSG;
 7c0:	80 91 fa 00 	lds	r24, 0x00FA
 7c4:	fe 01       	movw	r30, r28
 7c6:	e9 0f       	add	r30, r25
 7c8:	f1 1d       	adc	r31, r1
 7ca:	85 83       	std	Z+5, r24	; 0x05
	for(i = 0; i < 8; i++)	
	{	
	  msg->data[i] = 0;
	}

   for(i = 0; i < msg->length; i++)
 7cc:	9f 5f       	subi	r25, 0xFF	; 255
 7ce:	8c 81       	ldd	r24, Y+4	; 0x04
 7d0:	98 17       	cp	r25, r24
 7d2:	b0 f3       	brcs	.-20     	; 0x7c0 <CAN_Copy_MOb+0x2a>
   {
      msg->data[i] = CANMSG;
   }
}
 7d4:	df 91       	pop	r29
 7d6:	cf 91       	pop	r28
 7d8:	08 95       	ret

000007da <CAN_Configure_MOb>:
   
   return 1;
}

uint8_t CAN_Configure_MOb(CAN_mob mob, CAN_msg *msg)
{
 7da:	1f 93       	push	r17
 7dc:	cf 93       	push	r28
 7de:	df 93       	push	r29
 7e0:	18 2f       	mov	r17, r24
 7e2:	eb 01       	movw	r28, r22
	// check if MOb is already in use --> return 0
   if (mob < 8)
 7e4:	88 30       	cpi	r24, 0x08	; 8
 7e6:	60 f4       	brcc	.+24     	; 0x800 <CAN_Configure_MOb+0x26>
	{
      if(CANEN2 & (1 << mob))
 7e8:	80 91 dc 00 	lds	r24, 0x00DC
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	01 2e       	mov	r0, r17
 7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <CAN_Configure_MOb+0x1c>
 7f2:	95 95       	asr	r25
 7f4:	87 95       	ror	r24
 7f6:	0a 94       	dec	r0
 7f8:	e2 f7       	brpl	.-8      	; 0x7f2 <CAN_Configure_MOb+0x18>
 7fa:	80 ff       	sbrs	r24, 0
 7fc:	0d c0       	rjmp	.+26     	; 0x818 <CAN_Configure_MOb+0x3e>
 7fe:	22 c0       	rjmp	.+68     	; 0x844 <CAN_Configure_MOb+0x6a>
			return 0;
	}
   else
	{
      if(CANEN1 & (1 << (mob - 8)))
 800:	20 91 dd 00 	lds	r18, 0x00DD
 804:	30 e0       	ldi	r19, 0x00	; 0
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	08 97       	sbiw	r24, 0x08	; 8
 80a:	02 c0       	rjmp	.+4      	; 0x810 <CAN_Configure_MOb+0x36>
 80c:	35 95       	asr	r19
 80e:	27 95       	ror	r18
 810:	8a 95       	dec	r24
 812:	e2 f7       	brpl	.-8      	; 0x80c <CAN_Configure_MOb+0x32>
 814:	20 fd       	sbrc	r18, 0
 816:	16 c0       	rjmp	.+44     	; 0x844 <CAN_Configure_MOb+0x6a>
			return 0;
	}
	
   // select MOb
   CAN_get_mob(mob);
 818:	81 2f       	mov	r24, r17
 81a:	0e 94 6e 02 	call	0x4dc	; 0x4dc <CAN_get_mob>
   // Set DLC (Data Length Code) and data
   CAN_set_data(msg->length, msg->data);
 81e:	be 01       	movw	r22, r28
 820:	6b 5f       	subi	r22, 0xFB	; 251
 822:	7f 4f       	sbci	r23, 0xFF	; 255
 824:	8c 81       	ldd	r24, Y+4	; 0x04
 826:	0e 94 00 03 	call	0x600	; 0x600 <CAN_set_data>
   // set ID
   CAN_set_id(msg->id);
 82a:	88 81       	ld	r24, Y
 82c:	99 81       	ldd	r25, Y+1	; 0x01
 82e:	0e 94 b9 02 	call	0x572	; 0x572 <CAN_set_id>
   // Set Mask
   CAN_set_id_mask(msg->msk);
 832:	8a 81       	ldd	r24, Y+2	; 0x02
 834:	9b 81       	ldd	r25, Y+3	; 0x03
 836:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <CAN_set_id_mask>

   // Enable interrupts for MOb
   CAN_enable_mob_interrupt(mob);
 83a:	81 2f       	mov	r24, r17
 83c:	0e 94 75 02 	call	0x4ea	; 0x4ea <CAN_enable_mob_interrupt>
 840:	81 e0       	ldi	r24, 0x01	; 1
 842:	01 c0       	rjmp	.+2      	; 0x846 <CAN_Configure_MOb+0x6c>

   return 1;
 844:	80 e0       	ldi	r24, 0x00	; 0
}
 846:	df 91       	pop	r29
 848:	cf 91       	pop	r28
 84a:	1f 91       	pop	r17
 84c:	08 95       	ret

0000084e <CAN_init>:
      0x37
   }
};

uint8_t CAN_init(CAN_bitrate bitrate)
{
 84e:	0f 93       	push	r16
 850:	1f 93       	push	r17
 852:	08 2f       	mov	r16, r24
   uint8_t mob;
   
   // set to -1, no message received yet
   CAN_MSG_RECEIVED = -1;
 854:	8f ef       	ldi	r24, 0xFF	; 255
 856:	80 93 b3 01 	sts	0x01B3, r24
   
   if (bitrate >= 8)
 85a:	08 30       	cpi	r16, 0x08	; 8
 85c:	10 f0       	brcs	.+4      	; 0x862 <CAN_init+0x14>
 85e:	80 e0       	ldi	r24, 0x00	; 0
 860:	50 c0       	rjmp	.+160    	; 0x902 <CAN_init+0xb4>
      return 0;
   
   // switch CAN controller to reset mode
   CANGCON |= (1 << SWRES);
 862:	80 91 d8 00 	lds	r24, 0x00D8
 866:	81 60       	ori	r24, 0x01	; 1
 868:	80 93 d8 00 	sts	0x00D8, r24
   
   // reset all interrupt registers
   CANSIT2 = 0x00;
 86c:	10 92 e0 00 	sts	0x00E0, r1
   CANSIT1 = 0x00;
 870:	10 92 e1 00 	sts	0x00E1, r1
   CANGIT  = 0x00;
 874:	10 92 da 00 	sts	0x00DA, r1
   CANGIE  = 0x00;
 878:	10 92 db 00 	sts	0x00DB, r1
   CANEN1  = 0x00;
 87c:	10 92 dd 00 	sts	0x00DD, r1
   CANEN2  = 0x00;
 880:	10 92 dc 00 	sts	0x00DC, r1
   CANIE1  = 0x00;
 884:	10 92 df 00 	sts	0x00DF, r1
   CANIE2  = 0x00;
 888:	10 92 de 00 	sts	0x00DE, r1
 88c:	10 e0       	ldi	r17, 0x00	; 0
   
   // reset all MObs
  for (mob = 0; mob < 15; mob++)
  { 
      CAN_get_mob(mob);
 88e:	81 2f       	mov	r24, r17
 890:	0e 94 6e 02 	call	0x4dc	; 0x4dc <CAN_get_mob>
      CANIDT1 = 0x00;  //  reset ID-Tag
 894:	10 92 f3 00 	sts	0x00F3, r1
      CANIDT2 = 0x00;
 898:	10 92 f2 00 	sts	0x00F2, r1
      CANIDT3 = 0x00;
 89c:	10 92 f1 00 	sts	0x00F1, r1
      CANIDT4 = 0x00;
 8a0:	10 92 f0 00 	sts	0x00F0, r1

      CANIDM1 = 0x00;  //  reset ID-Mask
 8a4:	10 92 f7 00 	sts	0x00F7, r1
      CANIDM2 = 0x00;
 8a8:	10 92 f6 00 	sts	0x00F6, r1
      CANIDM3 = 0x00;
 8ac:	10 92 f5 00 	sts	0x00F5, r1
      CANIDM4 = 0x00;
 8b0:	10 92 f4 00 	sts	0x00F4, r1
      
      // Disable MOb interrupt
      CAN_disable_mob_interrupt(mob); 
 8b4:	81 2f       	mov	r24, r17
 8b6:	0e 94 96 02 	call	0x52c	; 0x52c <CAN_disable_mob_interrupt>

      CANSTMOB = 0x00;  //  reset MOb status
 8ba:	10 92 ee 00 	sts	0x00EE, r1
      CANCDMOB = 0x00;  //  disable MOb
 8be:	10 92 ef 00 	sts	0x00EF, r1
   CANEN2  = 0x00;
   CANIE1  = 0x00;
   CANIE2  = 0x00;
   
   // reset all MObs
  for (mob = 0; mob < 15; mob++)
 8c2:	1f 5f       	subi	r17, 0xFF	; 255
 8c4:	1f 30       	cpi	r17, 0x0F	; 15
 8c6:	19 f7       	brne	.-58     	; 0x88e <CAN_init+0x40>
      CANCDMOB = 0x00;  //  disable MOb
  }
   
   
   // set CAN Bit Timing
   CANBT1 = AT90CAN_Bitrates[bitrate][0];
 8c8:	80 2f       	mov	r24, r16
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	fc 01       	movw	r30, r24
 8ce:	ee 0f       	add	r30, r30
 8d0:	ff 1f       	adc	r31, r31
 8d2:	e8 0f       	add	r30, r24
 8d4:	f9 1f       	adc	r31, r25
 8d6:	e0 50       	subi	r30, 0x00	; 0
 8d8:	ff 4f       	sbci	r31, 0xFF	; 255
 8da:	80 81       	ld	r24, Z
 8dc:	80 93 e2 00 	sts	0x00E2, r24
   CANBT2 = AT90CAN_Bitrates[bitrate][1];
 8e0:	81 81       	ldd	r24, Z+1	; 0x01
 8e2:	80 93 e3 00 	sts	0x00E3, r24
   CANBT3 = AT90CAN_Bitrates[bitrate][2];
 8e6:	82 81       	ldd	r24, Z+2	; 0x02
 8e8:	80 93 e4 00 	sts	0x00E4, r24
   
   // activate CAN transmit- and receive-interrupt
   CANGIE = ((1 << ENIT) | (1 << ENRX) | (1 << ENTX));
 8ec:	80 eb       	ldi	r24, 0xB0	; 176
 8ee:	80 93 db 00 	sts	0x00DB, r24
   
   // activate CAN controller
   CANGCON = (1 << ENASTB);
 8f2:	82 e0       	ldi	r24, 0x02	; 2
 8f4:	80 93 d8 00 	sts	0x00D8, r24

     //  wait for EnableFlag
  while (!(CANGSTA & (1<<ENFG))); 
 8f8:	80 91 d9 00 	lds	r24, 0x00D9
 8fc:	82 ff       	sbrs	r24, 2
 8fe:	fc cf       	rjmp	.-8      	; 0x8f8 <CAN_init+0xaa>
 900:	81 e0       	ldi	r24, 0x01	; 1
   
   return 1;
}
 902:	1f 91       	pop	r17
 904:	0f 91       	pop	r16
 906:	08 95       	ret

00000908 <__vector_21>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
 908:	1f 92       	push	r1
 90a:	0f 92       	push	r0
 90c:	0f b6       	in	r0, 0x3f	; 63
 90e:	0f 92       	push	r0
 910:	0b b6       	in	r0, 0x3b	; 59
 912:	0f 92       	push	r0
 914:	11 24       	eor	r1, r1
 916:	2f 93       	push	r18
 918:	8f 93       	push	r24
 91a:	9f 93       	push	r25
 91c:	ef 93       	push	r30
 91e:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
 920:	90 91 c0 00 	lds	r25, 0x00C0
    data = UART0_DATA;
 924:	20 91 c6 00 	lds	r18, 0x00C6
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 928:	e0 91 6b 01 	lds	r30, 0x016B
 92c:	ef 5f       	subi	r30, 0xFF	; 255
 92e:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
 930:	80 91 6c 01 	lds	r24, 0x016C
 934:	e8 17       	cp	r30, r24
 936:	11 f4       	brne	.+4      	; 0x93c <__vector_21+0x34>
 938:	82 e0       	ldi	r24, 0x02	; 2
 93a:	08 c0       	rjmp	.+16     	; 0x94c <__vector_21+0x44>
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
 93c:	89 2f       	mov	r24, r25
 93e:	88 71       	andi	r24, 0x18	; 24
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
 940:	e0 93 6b 01 	sts	0x016B, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 944:	f0 e0       	ldi	r31, 0x00	; 0
 946:	e7 5b       	subi	r30, 0xB7	; 183
 948:	fe 4f       	sbci	r31, 0xFE	; 254
 94a:	20 83       	st	Z, r18
    }
    UART_LastRxError = lastRxError;   
 94c:	80 93 6d 01 	sts	0x016D, r24
}
 950:	ff 91       	pop	r31
 952:	ef 91       	pop	r30
 954:	9f 91       	pop	r25
 956:	8f 91       	pop	r24
 958:	2f 91       	pop	r18
 95a:	0f 90       	pop	r0
 95c:	0b be       	out	0x3b, r0	; 59
 95e:	0f 90       	pop	r0
 960:	0f be       	out	0x3f, r0	; 63
 962:	0f 90       	pop	r0
 964:	1f 90       	pop	r1
 966:	18 95       	reti

00000968 <__vector_22>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 968:	1f 92       	push	r1
 96a:	0f 92       	push	r0
 96c:	0f b6       	in	r0, 0x3f	; 63
 96e:	0f 92       	push	r0
 970:	0b b6       	in	r0, 0x3b	; 59
 972:	0f 92       	push	r0
 974:	11 24       	eor	r1, r1
 976:	8f 93       	push	r24
 978:	9f 93       	push	r25
 97a:	ef 93       	push	r30
 97c:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 97e:	90 91 69 01 	lds	r25, 0x0169
 982:	80 91 6a 01 	lds	r24, 0x016A
 986:	98 17       	cp	r25, r24
 988:	69 f0       	breq	.+26     	; 0x9a4 <__vector_22+0x3c>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 98a:	e0 91 6a 01 	lds	r30, 0x016A
 98e:	ef 5f       	subi	r30, 0xFF	; 255
 990:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 992:	e0 93 6a 01 	sts	0x016A, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 996:	f0 e0       	ldi	r31, 0x00	; 0
 998:	e7 5d       	subi	r30, 0xD7	; 215
 99a:	fe 4f       	sbci	r31, 0xFE	; 254
 99c:	80 81       	ld	r24, Z
 99e:	80 93 c6 00 	sts	0x00C6, r24
 9a2:	05 c0       	rjmp	.+10     	; 0x9ae <__vector_22+0x46>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 9a4:	80 91 c1 00 	lds	r24, 0x00C1
 9a8:	8f 7d       	andi	r24, 0xDF	; 223
 9aa:	80 93 c1 00 	sts	0x00C1, r24
    }
}
 9ae:	ff 91       	pop	r31
 9b0:	ef 91       	pop	r30
 9b2:	9f 91       	pop	r25
 9b4:	8f 91       	pop	r24
 9b6:	0f 90       	pop	r0
 9b8:	0b be       	out	0x3b, r0	; 59
 9ba:	0f 90       	pop	r0
 9bc:	0f be       	out	0x3f, r0	; 63
 9be:	0f 90       	pop	r0
 9c0:	1f 90       	pop	r1
 9c2:	18 95       	reti

000009c4 <uart_init>:
Purpose:  initialize UART and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
 9c4:	9c 01       	movw	r18, r24
    UART_TxHead = 0;
 9c6:	10 92 69 01 	sts	0x0169, r1
    UART_TxTail = 0;
 9ca:	10 92 6a 01 	sts	0x016A, r1
    UART_RxHead = 0;
 9ce:	10 92 6b 01 	sts	0x016B, r1
    UART_RxTail = 0;
 9d2:	10 92 6c 01 	sts	0x016C, r1
    UCSRC = (3<<UCSZ0);
    #endif 
    
#elif defined (ATMEGA_USART0 )
    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
 9d6:	97 ff       	sbrs	r25, 7
 9d8:	04 c0       	rjmp	.+8      	; 0x9e2 <uart_init+0x1e>
    {
   		UART0_STATUS = (1<<U2X0);  //Enable 2x speed 
 9da:	82 e0       	ldi	r24, 0x02	; 2
 9dc:	80 93 c0 00 	sts	0x00C0, r24
   		baudrate &= ~0x8000;
 9e0:	3f 77       	andi	r19, 0x7F	; 127
   	}
    UBRR0H = (unsigned char)(baudrate>>8);
 9e2:	30 93 c5 00 	sts	0x00C5, r19
    UBRR0L = (unsigned char) baudrate;
 9e6:	20 93 c4 00 	sts	0x00C4, r18

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 9ea:	88 e9       	ldi	r24, 0x98	; 152
 9ec:	80 93 c1 00 	sts	0x00C1, r24
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL0
    UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
    #else
    UCSR0C = (3<<UCSZ00);
 9f0:	86 e0       	ldi	r24, 0x06	; 6
 9f2:	80 93 c2 00 	sts	0x00C2, r24
    /* Enable UART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
 9f6:	08 95       	ret

000009f8 <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
 9f8:	90 91 6b 01 	lds	r25, 0x016B
 9fc:	80 91 6c 01 	lds	r24, 0x016C
 a00:	98 17       	cp	r25, r24
 a02:	19 f4       	brne	.+6      	; 0xa0a <uart_getc+0x12>
 a04:	20 e0       	ldi	r18, 0x00	; 0
 a06:	31 e0       	ldi	r19, 0x01	; 1
 a08:	12 c0       	rjmp	.+36     	; 0xa2e <uart_getc+0x36>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 a0a:	e0 91 6c 01 	lds	r30, 0x016C
 a0e:	ef 5f       	subi	r30, 0xFF	; 255
 a10:	ef 71       	andi	r30, 0x1F	; 31
    UART_RxTail = tmptail; 
 a12:	e0 93 6c 01 	sts	0x016C, r30
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 a16:	f0 e0       	ldi	r31, 0x00	; 0
 a18:	e7 5b       	subi	r30, 0xB7	; 183
 a1a:	fe 4f       	sbci	r31, 0xFE	; 254
 a1c:	30 81       	ld	r19, Z
    
    return (UART_LastRxError << 8) + data;
 a1e:	20 91 6d 01 	lds	r18, 0x016D
 a22:	92 2f       	mov	r25, r18
 a24:	80 e0       	ldi	r24, 0x00	; 0
 a26:	ac 01       	movw	r20, r24
 a28:	43 0f       	add	r20, r19
 a2a:	51 1d       	adc	r21, r1
 a2c:	9a 01       	movw	r18, r20

}/* uart_getc */
 a2e:	c9 01       	movw	r24, r18
 a30:	08 95       	ret

00000a32 <uart_putc>:
Purpose:  write byte to ringbuffer for transmitting via UART
Input:    byte to be transmitted
Returns:  none          
**************************************************************************/
void uart_putc(unsigned char data)
{
 a32:	28 2f       	mov	r18, r24
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 a34:	90 91 69 01 	lds	r25, 0x0169
 a38:	9f 5f       	subi	r25, 0xFF	; 255
 a3a:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 a3c:	80 91 6a 01 	lds	r24, 0x016A
 a40:	98 17       	cp	r25, r24
 a42:	e1 f3       	breq	.-8      	; 0xa3c <uart_putc+0xa>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 a44:	e9 2f       	mov	r30, r25
 a46:	f0 e0       	ldi	r31, 0x00	; 0
 a48:	e7 5d       	subi	r30, 0xD7	; 215
 a4a:	fe 4f       	sbci	r31, 0xFE	; 254
 a4c:	20 83       	st	Z, r18
    UART_TxHead = tmphead;
 a4e:	90 93 69 01 	sts	0x0169, r25

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 a52:	80 91 c1 00 	lds	r24, 0x00C1
 a56:	80 62       	ori	r24, 0x20	; 32
 a58:	80 93 c1 00 	sts	0x00C1, r24

}/* uart_putc */
 a5c:	08 95       	ret

00000a5e <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 a5e:	dc 01       	movw	r26, r24
 a60:	15 c0       	rjmp	.+42     	; 0xa8c <uart_puts+0x2e>
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 a62:	90 91 69 01 	lds	r25, 0x0169
 a66:	9f 5f       	subi	r25, 0xFF	; 255
 a68:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 a6a:	80 91 6a 01 	lds	r24, 0x016A
 a6e:	98 17       	cp	r25, r24
 a70:	e1 f3       	breq	.-8      	; 0xa6a <uart_puts+0xc>
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
      uart_putc(*s++);
 a72:	11 96       	adiw	r26, 0x01	; 1
    
    while ( tmphead == UART_TxTail ){
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 a74:	e9 2f       	mov	r30, r25
 a76:	f0 e0       	ldi	r31, 0x00	; 0
 a78:	e7 5d       	subi	r30, 0xD7	; 215
 a7a:	fe 4f       	sbci	r31, 0xFE	; 254
 a7c:	20 83       	st	Z, r18
    UART_TxHead = tmphead;
 a7e:	90 93 69 01 	sts	0x0169, r25

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 a82:	80 91 c1 00 	lds	r24, 0x00C1
 a86:	80 62       	ori	r24, 0x20	; 32
 a88:	80 93 c1 00 	sts	0x00C1, r24
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
 a8c:	2c 91       	ld	r18, X
 a8e:	22 23       	and	r18, r18
 a90:	41 f7       	brne	.-48     	; 0xa62 <uart_puts+0x4>
      uart_putc(*s++);

}/* uart_puts */
 a92:	08 95       	ret

00000a94 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
 a94:	ac 01       	movw	r20, r24
 a96:	14 c0       	rjmp	.+40     	; 0xac0 <uart_puts_p+0x2c>
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 a98:	20 91 69 01 	lds	r18, 0x0169
 a9c:	2f 5f       	subi	r18, 0xFF	; 255
 a9e:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 aa0:	80 91 6a 01 	lds	r24, 0x016A
 aa4:	28 17       	cp	r18, r24
 aa6:	e1 f3       	breq	.-8      	; 0xaa0 <uart_puts_p+0xc>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 aa8:	e2 2f       	mov	r30, r18
 aaa:	f0 e0       	ldi	r31, 0x00	; 0
 aac:	e7 5d       	subi	r30, 0xD7	; 215
 aae:	fe 4f       	sbci	r31, 0xFE	; 254
 ab0:	90 83       	st	Z, r25
    UART_TxHead = tmphead;
 ab2:	20 93 69 01 	sts	0x0169, r18

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 ab6:	80 91 c1 00 	lds	r24, 0x00C1
 aba:	80 62       	ori	r24, 0x20	; 32
 abc:	80 93 c1 00 	sts	0x00C1, r24
 ac0:	fa 01       	movw	r30, r20
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 ac2:	4f 5f       	subi	r20, 0xFF	; 255
 ac4:	5f 4f       	sbci	r21, 0xFF	; 255
 ac6:	94 91       	lpm	r25, Z+
 ac8:	99 23       	and	r25, r25
 aca:	31 f7       	brne	.-52     	; 0xa98 <uart_puts_p+0x4>
      uart_putc(c);

}/* uart_puts_p */
 acc:	08 95       	ret

00000ace <__vector_32>:
SIGNAL(UART1_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART1 has received a character
**************************************************************************/
{
 ace:	1f 92       	push	r1
 ad0:	0f 92       	push	r0
 ad2:	0f b6       	in	r0, 0x3f	; 63
 ad4:	0f 92       	push	r0
 ad6:	0b b6       	in	r0, 0x3b	; 59
 ad8:	0f 92       	push	r0
 ada:	11 24       	eor	r1, r1
 adc:	2f 93       	push	r18
 ade:	8f 93       	push	r24
 ae0:	9f 93       	push	r25
 ae2:	ef 93       	push	r30
 ae4:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART1_STATUS;
 ae6:	90 91 c8 00 	lds	r25, 0x00C8
    data = UART1_DATA;
 aea:	20 91 ce 00 	lds	r18, 0x00CE
    
    /* */
    lastRxError = (usr & (_BV(FE1)|_BV(DOR1)) );
        
    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
 aee:	e0 91 b0 01 	lds	r30, 0x01B0
 af2:	ef 5f       	subi	r30, 0xFF	; 255
 af4:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART1_RxTail ) {
 af6:	80 91 b1 01 	lds	r24, 0x01B1
 afa:	e8 17       	cp	r30, r24
 afc:	11 f4       	brne	.+4      	; 0xb02 <__vector_32+0x34>
 afe:	82 e0       	ldi	r24, 0x02	; 2
 b00:	08 c0       	rjmp	.+16     	; 0xb12 <__vector_32+0x44>
    /* read UART status register and UART data register */ 
    usr  = UART1_STATUS;
    data = UART1_DATA;
    
    /* */
    lastRxError = (usr & (_BV(FE1)|_BV(DOR1)) );
 b02:	89 2f       	mov	r24, r25
 b04:	88 71       	andi	r24, 0x18	; 24
    if ( tmphead == UART1_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART1_RxHead = tmphead;
 b06:	e0 93 b0 01 	sts	0x01B0, r30
        /* store received data in buffer */
        UART1_RxBuf[tmphead] = data;
 b0a:	f0 e0       	ldi	r31, 0x00	; 0
 b0c:	e2 57       	subi	r30, 0x72	; 114
 b0e:	fe 4f       	sbci	r31, 0xFE	; 254
 b10:	20 83       	st	Z, r18
    }
    UART1_LastRxError = lastRxError;   
 b12:	80 93 b2 01 	sts	0x01B2, r24
}
 b16:	ff 91       	pop	r31
 b18:	ef 91       	pop	r30
 b1a:	9f 91       	pop	r25
 b1c:	8f 91       	pop	r24
 b1e:	2f 91       	pop	r18
 b20:	0f 90       	pop	r0
 b22:	0b be       	out	0x3b, r0	; 59
 b24:	0f 90       	pop	r0
 b26:	0f be       	out	0x3f, r0	; 63
 b28:	0f 90       	pop	r0
 b2a:	1f 90       	pop	r1
 b2c:	18 95       	reti

00000b2e <__vector_33>:
SIGNAL(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
 b2e:	1f 92       	push	r1
 b30:	0f 92       	push	r0
 b32:	0f b6       	in	r0, 0x3f	; 63
 b34:	0f 92       	push	r0
 b36:	0b b6       	in	r0, 0x3b	; 59
 b38:	0f 92       	push	r0
 b3a:	11 24       	eor	r1, r1
 b3c:	8f 93       	push	r24
 b3e:	9f 93       	push	r25
 b40:	ef 93       	push	r30
 b42:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART1_TxHead != UART1_TxTail) {
 b44:	90 91 ae 01 	lds	r25, 0x01AE
 b48:	80 91 af 01 	lds	r24, 0x01AF
 b4c:	98 17       	cp	r25, r24
 b4e:	69 f0       	breq	.+26     	; 0xb6a <__vector_33+0x3c>
        /* calculate and store new buffer index */
        tmptail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
 b50:	e0 91 af 01 	lds	r30, 0x01AF
 b54:	ef 5f       	subi	r30, 0xFF	; 255
 b56:	ef 71       	andi	r30, 0x1F	; 31
        UART1_TxTail = tmptail;
 b58:	e0 93 af 01 	sts	0x01AF, r30
        /* get one byte from buffer and write it to UART */
        UART1_DATA = UART1_TxBuf[tmptail];  /* start transmission */
 b5c:	f0 e0       	ldi	r31, 0x00	; 0
 b5e:	e2 59       	subi	r30, 0x92	; 146
 b60:	fe 4f       	sbci	r31, 0xFE	; 254
 b62:	80 81       	ld	r24, Z
 b64:	80 93 ce 00 	sts	0x00CE, r24
 b68:	05 c0       	rjmp	.+10     	; 0xb74 <__vector_33+0x46>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART1_CONTROL &= ~_BV(UART1_UDRIE);
 b6a:	80 91 c9 00 	lds	r24, 0x00C9
 b6e:	8f 7d       	andi	r24, 0xDF	; 223
 b70:	80 93 c9 00 	sts	0x00C9, r24
    }
}
 b74:	ff 91       	pop	r31
 b76:	ef 91       	pop	r30
 b78:	9f 91       	pop	r25
 b7a:	8f 91       	pop	r24
 b7c:	0f 90       	pop	r0
 b7e:	0b be       	out	0x3b, r0	; 59
 b80:	0f 90       	pop	r0
 b82:	0f be       	out	0x3f, r0	; 63
 b84:	0f 90       	pop	r0
 b86:	1f 90       	pop	r1
 b88:	18 95       	reti

00000b8a <uart1_init>:
Purpose:  initialize UART1 and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart1_init(unsigned int baudrate)
{
 b8a:	9c 01       	movw	r18, r24
    UART1_TxHead = 0;
 b8c:	10 92 ae 01 	sts	0x01AE, r1
    UART1_TxTail = 0;
 b90:	10 92 af 01 	sts	0x01AF, r1
    UART1_RxHead = 0;
 b94:	10 92 b0 01 	sts	0x01B0, r1
    UART1_RxTail = 0;
 b98:	10 92 b1 01 	sts	0x01B1, r1
    

    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
 b9c:	97 ff       	sbrs	r25, 7
 b9e:	04 c0       	rjmp	.+8      	; 0xba8 <uart1_init+0x1e>
    {
    	UART1_STATUS = (1<<U2X1);  //Enable 2x speed 
 ba0:	82 e0       	ldi	r24, 0x02	; 2
 ba2:	80 93 c8 00 	sts	0x00C8, r24
      baudrate &= ~0x8000;
 ba6:	3f 77       	andi	r19, 0x7F	; 127
    }
    UBRR1H = (unsigned char)(baudrate>>8);
 ba8:	30 93 cd 00 	sts	0x00CD, r19
    UBRR1L = (unsigned char) baudrate;
 bac:	20 93 cc 00 	sts	0x00CC, r18

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART1_CONTROL = _BV(RXCIE1)|(1<<RXEN1)|(1<<TXEN1);
 bb0:	88 e9       	ldi	r24, 0x98	; 152
 bb2:	80 93 c9 00 	sts	0x00C9, r24
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */   
    #ifdef URSEL1
    UCSR1C = (1<<URSEL1)|(3<<UCSZ10);
    #else
    UCSR1C = (3<<UCSZ10);
 bb6:	86 e0       	ldi	r24, 0x06	; 6
 bb8:	80 93 ca 00 	sts	0x00CA, r24
    #endif 
}/* uart_init */
 bbc:	08 95       	ret

00000bbe <uart1_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART1_RxHead == UART1_RxTail ) {
 bbe:	90 91 b0 01 	lds	r25, 0x01B0
 bc2:	80 91 b1 01 	lds	r24, 0x01B1
 bc6:	98 17       	cp	r25, r24
 bc8:	19 f4       	brne	.+6      	; 0xbd0 <uart1_getc+0x12>
 bca:	20 e0       	ldi	r18, 0x00	; 0
 bcc:	31 e0       	ldi	r19, 0x01	; 1
 bce:	12 c0       	rjmp	.+36     	; 0xbf4 <uart1_getc+0x36>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART1_RxTail + 1) & UART_RX_BUFFER_MASK;
 bd0:	e0 91 b1 01 	lds	r30, 0x01B1
 bd4:	ef 5f       	subi	r30, 0xFF	; 255
 bd6:	ef 71       	andi	r30, 0x1F	; 31
    UART1_RxTail = tmptail; 
 bd8:	e0 93 b1 01 	sts	0x01B1, r30
    
    /* get data from receive buffer */
    data = UART1_RxBuf[tmptail];
 bdc:	f0 e0       	ldi	r31, 0x00	; 0
 bde:	e2 57       	subi	r30, 0x72	; 114
 be0:	fe 4f       	sbci	r31, 0xFE	; 254
 be2:	30 81       	ld	r19, Z
    
    return (UART1_LastRxError << 8) + data;
 be4:	20 91 b2 01 	lds	r18, 0x01B2
 be8:	92 2f       	mov	r25, r18
 bea:	80 e0       	ldi	r24, 0x00	; 0
 bec:	ac 01       	movw	r20, r24
 bee:	43 0f       	add	r20, r19
 bf0:	51 1d       	adc	r21, r1
 bf2:	9a 01       	movw	r18, r20

}/* uart1_getc */
 bf4:	c9 01       	movw	r24, r18
 bf6:	08 95       	ret

00000bf8 <uart1_putc>:
Purpose:  write byte to ringbuffer for transmitting via UART
Input:    byte to be transmitted
Returns:  none          
**************************************************************************/
void uart1_putc(unsigned char data)
{
 bf8:	28 2f       	mov	r18, r24
    unsigned char tmphead;

    
    tmphead  = (UART1_TxHead + 1) & UART_TX_BUFFER_MASK;
 bfa:	90 91 ae 01 	lds	r25, 0x01AE
 bfe:	9f 5f       	subi	r25, 0xFF	; 255
 c00:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART1_TxTail ){
 c02:	80 91 af 01 	lds	r24, 0x01AF
 c06:	98 17       	cp	r25, r24
 c08:	e1 f3       	breq	.-8      	; 0xc02 <uart1_putc+0xa>
        ;/* wait for free space in buffer */
    }
    
    UART1_TxBuf[tmphead] = data;
 c0a:	e9 2f       	mov	r30, r25
 c0c:	f0 e0       	ldi	r31, 0x00	; 0
 c0e:	e2 59       	subi	r30, 0x92	; 146
 c10:	fe 4f       	sbci	r31, 0xFE	; 254
 c12:	20 83       	st	Z, r18
    UART1_TxHead = tmphead;
 c14:	90 93 ae 01 	sts	0x01AE, r25

    /* enable UDRE interrupt */
    UART1_CONTROL    |= _BV(UART1_UDRIE);
 c18:	80 91 c9 00 	lds	r24, 0x00C9
 c1c:	80 62       	ori	r24, 0x20	; 32
 c1e:	80 93 c9 00 	sts	0x00C9, r24

}/* uart1_putc */
 c22:	08 95       	ret

00000c24 <uart1_puts>:
Purpose:  transmit string to UART1
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart1_puts(const char *s )
{
 c24:	dc 01       	movw	r26, r24
 c26:	15 c0       	rjmp	.+42     	; 0xc52 <uart1_puts+0x2e>
void uart1_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART1_TxHead + 1) & UART_TX_BUFFER_MASK;
 c28:	90 91 ae 01 	lds	r25, 0x01AE
 c2c:	9f 5f       	subi	r25, 0xFF	; 255
 c2e:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART1_TxTail ){
 c30:	80 91 af 01 	lds	r24, 0x01AF
 c34:	98 17       	cp	r25, r24
 c36:	e1 f3       	breq	.-8      	; 0xc30 <uart1_puts+0xc>
Returns:  none          
**************************************************************************/
void uart1_puts(const char *s )
{
    while (*s) 
      uart1_putc(*s++);
 c38:	11 96       	adiw	r26, 0x01	; 1
    
    while ( tmphead == UART1_TxTail ){
        ;/* wait for free space in buffer */
    }
    
    UART1_TxBuf[tmphead] = data;
 c3a:	e9 2f       	mov	r30, r25
 c3c:	f0 e0       	ldi	r31, 0x00	; 0
 c3e:	e2 59       	subi	r30, 0x92	; 146
 c40:	fe 4f       	sbci	r31, 0xFE	; 254
 c42:	20 83       	st	Z, r18
    UART1_TxHead = tmphead;
 c44:	90 93 ae 01 	sts	0x01AE, r25

    /* enable UDRE interrupt */
    UART1_CONTROL    |= _BV(UART1_UDRIE);
 c48:	80 91 c9 00 	lds	r24, 0x00C9
 c4c:	80 62       	ori	r24, 0x20	; 32
 c4e:	80 93 c9 00 	sts	0x00C9, r24
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart1_puts(const char *s )
{
    while (*s) 
 c52:	2c 91       	ld	r18, X
 c54:	22 23       	and	r18, r18
 c56:	41 f7       	brne	.-48     	; 0xc28 <uart1_puts+0x4>
      uart1_putc(*s++);

}/* uart1_puts */
 c58:	08 95       	ret

00000c5a <uart1_puts_p>:
Purpose:  transmit string from program memory to UART1
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart1_puts_p(const char *progmem_s )
{
 c5a:	ac 01       	movw	r20, r24
 c5c:	14 c0       	rjmp	.+40     	; 0xc86 <uart1_puts_p+0x2c>
void uart1_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART1_TxHead + 1) & UART_TX_BUFFER_MASK;
 c5e:	20 91 ae 01 	lds	r18, 0x01AE
 c62:	2f 5f       	subi	r18, 0xFF	; 255
 c64:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART1_TxTail ){
 c66:	80 91 af 01 	lds	r24, 0x01AF
 c6a:	28 17       	cp	r18, r24
 c6c:	e1 f3       	breq	.-8      	; 0xc66 <uart1_puts_p+0xc>
        ;/* wait for free space in buffer */
    }
    
    UART1_TxBuf[tmphead] = data;
 c6e:	e2 2f       	mov	r30, r18
 c70:	f0 e0       	ldi	r31, 0x00	; 0
 c72:	e2 59       	subi	r30, 0x92	; 146
 c74:	fe 4f       	sbci	r31, 0xFE	; 254
 c76:	90 83       	st	Z, r25
    UART1_TxHead = tmphead;
 c78:	20 93 ae 01 	sts	0x01AE, r18

    /* enable UDRE interrupt */
    UART1_CONTROL    |= _BV(UART1_UDRIE);
 c7c:	80 91 c9 00 	lds	r24, 0x00C9
 c80:	80 62       	ori	r24, 0x20	; 32
 c82:	80 93 c9 00 	sts	0x00C9, r24
 c86:	fa 01       	movw	r30, r20
**************************************************************************/
void uart1_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 c88:	4f 5f       	subi	r20, 0xFF	; 255
 c8a:	5f 4f       	sbci	r21, 0xFF	; 255
 c8c:	94 91       	lpm	r25, Z+
 c8e:	99 23       	and	r25, r25
 c90:	31 f7       	brne	.-52     	; 0xc5e <uart1_puts_p+0x4>
      uart1_putc(c);

}/* uart1_puts_p */
 c92:	08 95       	ret

00000c94 <_exit>:
 c94:	f8 94       	cli

00000c96 <__stop_program>:
 c96:	ff cf       	rjmp	.-2      	; 0xc96 <__stop_program>
